[build-system]
requires = ["hatchling>=1.27", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "niworkflows"
dynamic = ["version"]
description = "NeuroImaging Workflows provides processing tools for magnetic resonance images of the brain."
readme = "README.rst"
license = "Apache-2.0"
license-files = ["LICENSE"]
requires-python = ">= 3.10"
authors = [
    { name = "The NiPreps Developers", email = "nipreps@gmail.com" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Image Recognition",
]
dependencies = [
    "acres >=0.5",
    "attrs >=23.1",
    "jinja2 >=3",
    "looseversion >=1.3",
    "matplotlib >= 3.7",
    "nibabel >= 5.0",
    "nilearn >= 0.10",
    "nipype >= 1.9.1",
    "nitransforms >= 23.0.0",
    "numpy >= 1.24",
    "packaging",
    "pandas >= 2.0",
    "pybids >= 0.16",
    "pyyaml >= 6.0",
    "scikit-image >= 0.20",
    "scipy >= 1.10",
    "seaborn >= 0.13",
    "svgutils >= 0.3.4",
    "templateflow >= 23.1",
    "transforms3d >= 0.4",
]

[project.optional-dependencies]
doc = [
    "furo",
    "pydot >= 1.2.3",
    "pydotplus",
    "sphinx",
    "sphinxcontrib-apidoc",
    "sphinxcontrib-napoleon",
]
pointclouds = [
    "pyntcloud",
]
style = [
    "flake8 >= 3.7.0",
]
tests = [
    "coverage[toml] >=7",
    "pytest >= 8",
    "pytest-cov >= 7",
    "pytest-env",
    "pytest-xdist >= 3.8",
    "pytest-xvfb >= 2",
]
# Aliases
all = ["niworkflows[doc,pointclouds,style,tests]"]
docs = ["niworkflows[doc]"]

[project.scripts]
niworkflows-boldref = "niworkflows.cli.boldref:main"

[project.urls]
"Bug Tracker" = "https://github.com/nipreps/niworkflows/issues"
Documentation = "https://www.nipreps.org/niworkflows"
GitHub = "https://github.com/nipreps/niworkflows"
Homepage = "https://www.nipreps.org"
"Source Code" = "https://github.com/nipreps/niworkflows"
Zenodo = "https://doi.org/10.5281/zenodo.2650331"

#
# Hatch configurations
#

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.sdist]
exclude = [".git_archival.txt"]  # No longer needed in sdist

[tool.hatch.build.targets.wheel]
packages = ["niworkflows"]
exclude = [
    "niworkflows/data/tests/work",  # Large test data directory
    "niworkflows/tests/data",  # Large test data directory
]

##  The following two sections configure setuptools_scm in the hatch way

[tool.hatch.version]
source = "vcs"
raw-options = {version_scheme = "release-branch-semver" }

[tool.hatch.build.hooks.vcs]
version-file = "niworkflows/_version.py"

# Disable black
[tool.black]
exclude = ".*"

[tool.ruff]
line-length = 99

[tool.ruff.lint]
extend-select = [
  "I",
  "UP",
  "YTT",
  "S",
  "BLE",
  "B",
  "A",
  "C4",
  # "CPY",
  "DTZ",
  "T10",
  # "EM",
  "EXE",
  "FA",
  "ISC",
  "ICN",
  "LOG",
  "G",
  "PIE",
  "PYI",
  "PT",
  "Q",
  # "SIM",
  # "TID",
  "FLY",
  # "PD",
  "PERF",
  "W",
  "PGH",
  "PLC",
  "PLE",
  "PLW",
  "FURB",
  "RUF",
]
ignore = [
  "S311",  # We are not using random for cryptographic purposes
  "S404",
  "S603",
  "PLC0415",
  "PLW1510",
  "PLW1641",
  "PLW2901",
  "RUF005",
  "RUF012",
]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.lint.extend-per-file-ignores]
"*/__init__.py" = ["F401"]
"*/test_*.py" = ["S101"]
"docs/conf.py" = ["A001"]
"niworkflows/engine/plugin.py" = [
  "BLE001",  # except Exception is intentional
  "S101",  # Assertions are intentional
]

[tool.ruff.format]
quote-style = "single"

[tool.pytest.ini_options]
minversion = "6"
testpaths = ["niworkflows"]
log_cli_level = "INFO"
xfail_strict = true
norecursedirs = [".git"]
addopts = [
  "-svx",
  "-ra",
  "--strict-config",
  "--strict-markers",
  "--doctest-modules",
  # Config pytest-cov
  "--cov=niworkflows",
  "--cov-report=xml",
  "--cov-config=pyproject.toml",
]
doctest_optionflags = "ALLOW_UNICODE NORMALIZE_WHITESPACE ELLIPSIS"
env = "PYTHONHASHSEED=0"
filterwarnings = ["ignore::DeprecationWarning"]
junit_family = "xunit2"

[tool.coverage.run]
branch = true
parallel = true
omit = [
    "*/_version.py",
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    "raise NotImplementedError",
    "warnings\\.warn",
]

[tool.coverage.paths]
source = [
  "niworkflows",
  "**/site-packages/niworkflows"
]

[tool.codespell]
skip = "*/data/*,*/docs/_build/*,./examples/viz-report.*"
ignore-words-list = "objekt,nd"

[tool.pixi.workspace]
channels = ["https://fsl.fmrib.ox.ac.uk/fsldownloads/fslconda/public", "conda-forge"]
platforms = ["linux-64"]

[tool.pixi.feature.niworkflows.activation.env]
FSLDIR = "$CONDA_PREFIX"

[tool.pixi.pypi-dependencies]
niworkflows = { path = ".", editable = true }

[tool.pixi.environments]
default = { features = ["editable"], solve-group = "default" }
test = { features = ["editable", "tests"], solve-group = "default" }
niworkflows = { features = ["production"], solve-group = "production" }

[tool.pixi.feature.editable.pypi-dependencies]
niworkflows = { path = ".", editable = true }
[tool.pixi.feature.production.pypi-dependencies]
niworkflows = { path = ".", editable = false }

[tool.pixi.tasks]

[tool.pixi.dependencies]
python = "3.12.*"
mkl = "2024.2.2.*"
mkl-service = "2.4.2.*"
numpy = "1.26.*"
scipy = "1.15.*"
matplotlib = "3.9.*"
pandas = "2.2.*"
h5py = "3.13.*"
scikit-image = "0.25.*"
scikit-learn = "1.6.*"
graphviz = "11.0.*"
ants = "2.5.*"
libitk = "5.4.0.*"
fsl-bet2 = "2111.8.*"
fsl-flirt = "2111.2.*"
fsl-fast4 = "2111.3.*"
fsl-mcflirt = "2111.0.*"
fsl-miscmaths = "2203.2.*"
