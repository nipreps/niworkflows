# reusable anchors
_machine_defaults: &machine_defaults
  environment:
    TZ: "/usr/share/zoneinfo/America/Los_Angeles"
    SCRATCH: "/scratch"
  machine:
    image: ubuntu-2204:current
    docker_layer_caching: true
  working_directory: /tmp/src/niworkflows
  resource_class: large

_python_defaults: &python_defaults
  docker:
    - image: cimg/python:3.10.9
  working_directory: /tmp/src/niworkflows

_docker_auth: &docker_auth
  name: Docker authentication
  command: |
    if [[ -n $DOCKER_PAT ]]; then
      echo "$DOCKER_PAT" | docker login -u $DOCKER_USER --password-stdin
    fi

_setup_docker_registry: &setup_docker_registry
  name: Set up Docker registry
  command: |
    if [[ -f /tmp/images/registry.tar.gz ]]; then
      echo "Loading saved registry image"
      docker load < /tmp/images/registry.tar.gz
    else
      echo "Pulling registry image from DockerHub"
      docker pull registry:2
    fi
    docker run -d -p 5000:5000 --restart=always --name=registry \
        -v /tmp/docker:/var/lib/registry registry:2

_pull_from_registry: &pull_from_registry
  name: Pull and tag image from local registry
  command: |
    docker pull localhost:5000/niworkflows
    docker tag localhost:5000/niworkflows niworkflows:latest

version: 2.1
orbs:
  docker: circleci/docker@2.2.0
  codecov: codecov/codecov@3.2.4

jobs:
  build:
    <<: *machine_defaults
    steps:
      - restore_cache:
          keys:
            - build-v1-{{ .Branch }}-{{ .Revision }}
            - build-v1--{{ .Revision }}
            - build-v1-{{ .Branch }}-
            - build-v1-master-
            - build-v1-
          paths:
            - /tmp/docker
            - /tmp/images

      - docker/install-docker-credential-helper
      - run: *docker_auth
      - run: *setup_docker_registry
      - run:
          name: Save docker registry
          command: |
            if [[ ! -f /tmp/images/registry.tar.gz ]]; then
              mkdir -p /tmp/images
              docker save registry:2 | gzip > /tmp/images/registry.tar.gz
            fi
      - run:
          name: Pull niworkflows Docker image
          command: |
            set +e
            docker pull localhost:5000/niworkflows
            success=$?
            set -e
            if [[ "$success" = "0" ]]; then
                echo "Pulled from local registry"
                docker tag localhost:5000/niworkflows niworkflows:latest
            else
                echo "Pulling from Docker Hub"
                docker pull nipreps/niworkflows:latest
                docker tag nipreps/niworkflows:latest niworkflows:latest
            fi

      - checkout
      - run:
          name: Install pipx
          command: pip3 install pipx
      - run:
          name: Display version
          command: pipx run hatch version
      - run:
          name: Build Docker image & push to registry
          no_output_timeout: 60m
          command: |
            e=1 && for i in {1..5}; do
              docker build --rm --cache-from=niworkflows:latest \
                -t niworkflows:latest \
                --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
                --build-arg VCS_REF=`git rev-parse --short HEAD` \
                --build-arg VERSION=`pipx run hatch version` . \
              && e=0 && break || sleep 15
            done && [ "$e" -eq "0" ]
            docker tag niworkflows:latest localhost:5000/niworkflows
            docker push localhost:5000/niworkflows
      - run:
          name: Docker registry garbage collection
          command: |
            docker exec -it registry /bin/registry garbage-collect --delete-untagged \
                /etc/docker/registry/config.yml
      - save_cache:
          key: build-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - /tmp/docker
            - /tmp/images

  get_data:
    docker:
      - image: quay.io/condaforge/miniforge3:24.9.0-0
    working_directory: /tmp/data
    environment:
      - TEMPLATEFLOW_HOME: /tmp/templateflow
    steps:
      - restore_cache:
          keys:
            - env-v0-{{ .Branch }}-
            - env-v0-master-
            - env-v0-
      - run:
          name: Setup git-annex, DataLad & TemplateFlow
          command: |
            mamba install -y python=*=*cpython git-annex=*=alldep* unzip
            python -m pip install --no-cache-dir -U datalad datalad-osf templateflow
            git config --global user.name 'NiPreps Bot'
            git config --global user.email 'nipreps@gmail.com'
      - save_cache:
          key: env-v0-{{ .Branch }}-{{ .BuildNum }}
          paths:
            - /opt/conda

      - restore_cache:
          keys:
            - data-v3-{{ .Branch }}-
            - data-v3-master-
            - data-v3-
      - run:
          name: Get test data from ds000003
          command: |
            if [[ ! -d ds000003 ]]; then
              datalad install -r https://github.com/nipreps-data/ds000003.git
            fi
            datalad update -r --merge -d ds000003/
            datalad get -J 2 -r -d ds000003/ ds000003/*

      - run:
          name: Get test data from ds000030
          command: |
            if [[ ! -d ds000030 ]]; then
              datalad install -r https://github.com/nipreps-data/ds000030.git
            fi
            datalad update -r --merge -d ds000030/
            datalad get -J 2 -r -d ds000030/ ds000030/sub-10228/func/*

      - run:
          name: Get BIDS test data stub
          command: |
            mkdir -p /tmp/data
            if [[ ! -d /tmp/data/BIDS-examples-1-enh-ds054 ]]; then
              wget --retry-connrefused --waitretry=5 --read-timeout=20 --timeout=15 -t 0 -q \
                -O BIDS-examples-1-enh-ds054.zip "http://github.com/chrisfilo/BIDS-examples-1/archive/enh/ds054.zip"
              unzip BIDS-examples-1-enh-ds054.zip -d /tmp/data/
            else
              echo "BIDS stub was cached"
            fi
      - save_cache:
         key: data-v3-{{ .Branch }}-{{ epoch }}
         paths:
            - /tmp/data/ds000003
            - /tmp/data/ds000030
            - /tmp/data/BIDS-examples-1-enh-ds054
      - run:
          name: Store FreeSurfer license file
          command: |
            mkdir -p /tmp/fslicense
            cd /tmp/fslicense
            echo "cHJpbnRmICJrcnp5c3p0b2YuZ29yZ29sZXdza2lAZ21haWwuY29tXG41MTcyXG4gKkN2dW12RVYzelRmZ1xuRlM1Si8yYzFhZ2c0RVxuIiA+IGxpY2Vuc2UudHh0Cg==" | base64 -d | sh

      - checkout:
          path: /tmp/src/niworkflows

      - persist_to_workspace:
          root: /tmp
          paths:
            - fslicense
            - src/

  test_pytest:
    <<: *machine_defaults
    working_directory: /tmp/tests
    steps:
      - attach_workspace:
          at: /tmp
      - restore_cache:
          keys:
            - build-v1-{{ .Branch }}-{{ .Revision }}
      - docker/install-docker-credential-helper
      - run: *docker_auth
      - run: *setup_docker_registry
      - run: *pull_from_registry

      - restore_cache:
          keys:
            - data-v3-{{ .Branch }}-
            - data-v3-master-

      - run:
          name: Run unit tests
          no_output_timeout: 2h
          command: |
            mkdir -p $PWD/artifacts $PWD/summaries
            docker run -u $( id -u ):$( id -g ) --rm \
              -e COVERAGE_FILE=/tmp/summaries/.pytest.coverage \
              -e SAVE_CIRCLE_ARTIFACTS="/tmp/artifacts/" \
              -e TEST_DATA_HOME=/data -v /tmp/data:/data \
              -e FS_LICENSE=/etc/fslicense.txt \
              -v /tmp/fslicense/license.txt:/etc/fslicense.txt:ro \
              -v ${PWD}:/tmp niworkflows:latest \
              pytest --junit-xml=/tmp/summaries/pytest.xml \
                     --cov niworkflows --cov-report xml:/tmp/summaries/unittests.xml \
                     --ignore=niworkflows/tests/ \
                     --ignore=niworkflows/func/tests/ \
                     --pyargs niworkflows

      - codecov/upload:
          file: /tmp/tests/summaries/unittests.xml
          flags: unittests

      - run:
          name: Run reportlet tests
          no_output_timeout: 2h
          command: |
            docker run -u $( id -u ):$( id -g ) --rm \
              -e COVERAGE_FILE=/tmp/summaries/.reportlets.coverage \
              -e SAVE_CIRCLE_ARTIFACTS="/tmp/artifacts/" \
              -e TEST_DATA_HOME=/data -v /tmp/data:/data \
              -v /tmp/fslicense/license.txt:/opt/freesurfer/license.txt:ro \
              -v ${PWD}:/tmp niworkflows:latest \
              pytest -n auto --junit-xml=/tmp/summaries/reportlets.xml \
                     --cov niworkflows --cov-report xml:/tmp/summaries/reportlets.xml \
                     --pyargs niworkflows.tests

      - codecov/upload:
          file: /tmp/tests/summaries/reportlets.xml
          flags: reportlettests

      - run:
          name: Clean up tests directory
          command: |
            rm -rf /tmp/tests/pytest-of-root

      - store_artifacts:
          path: /tmp/tests/artifacts

      - store_test_results:
          path: /tmp/tests/summaries/

  test_package:
    <<: *python_defaults
    steps:
      - checkout
      - run:
          name: Install pipx
          command: pip install pipx
      - run:
          name: Display version
          command: pipx run hatch version
      - run:
          name: Build and check
          command: |
            pipx run build
            pipx run twine check dist/*
      - run:
          name: Validate version
          command: |
            THISVERSION=$( pipx run hatch version )
            python -m pip install dist/*.tar.gz
            mkdir empty
            cd empty
            INSTALLED=$( python -c 'import niworkflows; print(niworkflows.__version__)' )
            test "${CIRCLE_TAG:-$THISVERSION}" == "$INSTALLED"

  deploy_pypi:
    <<: *python_defaults
    steps:
      - checkout
      - run:
          name: Install pipx
          command: pip3 install pipx
      - run:
          name: Display version
          command: pipx run hatch version
      - run:
          name: Build and check
          command: |
            pipx run build
            pipx run twine check dist/*
      - run:
          name: Upload to PyPi
          command: |
            pipx run twine upload dist/*

  deploy_docker:
    <<: *machine_defaults
    working_directory: /tmp/src/
    steps:
      - restore_cache:
          keys:
            - build-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - /tmp/docker
            - /tmp/images
      - docker/install-docker-credential-helper
      - run: *docker_auth
      - run: *setup_docker_registry
      - run: *pull_from_registry
      - run:
          name: Deploy to Docker Hub
          no_output_timeout: 40m
          command: |
            docker tag niworkflows:latest nipreps/niworkflows:latest
            docker tag niworkflows:latest nipreps/niworkflows:$CIRCLE_TAG
            docker push nipreps/niworkflows:latest
            docker push nipreps/niworkflows:$CIRCLE_TAG

  build_docs:
    <<: *python_defaults
    environment:
      - FSLOUTPUTTYPE: NIFTI
      - SUBJECTS_DIR: /tmp/subjects
    steps:
      - checkout
      - run:
          name: Create subjects folder
          command: mkdir -p $SUBJECTS_DIR
      - run:
          name: Install Graphviz
          command: sudo apt update && sudo apt -y install graphviz
      - run:
          name: Install deps
          command: |
            python -m pip install --no-cache-dir -U "pip>=20.3"
            python -m pip install --no-cache-dir -r docs/requirements.txt
            eval "$(pyenv init -)"
      - run:
          name: Install Niworkflows
          command: |
            python -m pip install .
      - run:
          name: Build only this commit
          command: |
            BRANCH=$( echo $CIRCLE_BRANCH | sed 's+/+_+g' )
            make -C docs SPHINXOPTS="-W" BUILDDIR="$HOME/docs" OUTDIR=${CIRCLE_TAG:-$BRANCH} html
      - store_artifacts:
          path: ~/docs

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build:
          context:
            - nipreps-common
          filters:
            tags:
              only: /.*/
      - get_data:
          filters:
            tags:
              only: /.*/

      - test_package:
          context:
            - nipreps-common
          filters:
            branches:
              ignore:
                - /masks?\/.*/
            tags:
              only: /.*/

      - test_pytest:
          context:
            - nipreps-common
          requires:
            - build
            - get_data
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /masks?\/.*/
            tags:
              only: /.*/

      - deploy_pypi:
          context:
            - nipreps-common
          requires:
            - test_pytest
            - test_package
            - build_docs
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/

      - deploy_docker:
          context:
            - nipreps-common
          requires:
            - deploy_pypi
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/

      - build_docs:
          filters:
            branches:
              ignore:
                - /tests?\/.*/
                - /ds005\/.*/
                - /ds054\/.*/
            tags:
              only: /.*/
