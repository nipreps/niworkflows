version: 2
jobs:

  build:
    environment:
      TZ: "/usr/share/zoneinfo/America/Los_Angeles"
      SCRATCH: "/scratch"
    docker:
      - image: docker:18.01.0-ce-git
    working_directory: /tmp/src/niworkflows
    steps:
      - run:
          name: Install parallel gzip and python3
          command: |
            apk add --no-cache pigz python3
      - restore_cache:
          keys:
            - docker-v1-{{ .Branch }}-{{ epoch }}
            - docker-v1-{{ .Branch }}-
            - docker-v1-master-
            - docker-v1-
          paths:
            - /tmp/cache/docker.tar.gz
      - checkout
      - setup_remote_docker
      - run:
          name: Load Docker image layer cache
          no_output_timeout: 30m
          command: |
            docker info
            set +o pipefail
            if [ -f /tmp/cache/docker.tar.gz ]; then
              pigz -d --stdout /tmp/cache/docker.tar.gz | docker load
              docker images
            fi
      - run:
          name: Build Docker image
          no_output_timeout: 60m
          command: |
            THISVERSION=$( python3 get_version.py )
            e=1 && for i in {1..5}; do
              docker build \
                --cache-from=niworkflows:py3 \
                --rm=false \
                -t niworkflows:py3 \
                --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
                --build-arg VCS_REF=`git rev-parse --short HEAD` \
                --build-arg VERSION=${CIRCLE_TAG:-$THISVERSION} . \
              && e=0 && break || sleep 15
            done && [ "$e" -eq "0" ]
      - run:
          name: Docker save
          no_output_timeout: 40m
          command: |
            mkdir -p /tmp/cache
            docker save ubuntu:xenial-20161213 niworkflows:py3 \
            | pigz -8 -p 3 > /tmp/cache/docker.tar.gz
      - save_cache:
          key: docker-v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /tmp/cache/docker.tar.gz

      # - persist_to_workspace:
      #     root: /tmp
      #     paths:
      #       - cache/docker.tar.gz

  test_pytest:
    machine:
      image: circleci/classic:201711-01
    working_directory: /tmp/tests
    steps:
      # - attach_workspace:
      #     at: /tmp
      - restore_cache:
          keys:
            - docker-v1-{{ .Branch }}-{{ epoch }}
            - docker-v1-{{ .Branch }}-
            - docker-v1-master-
            - docker-v1-
      - checkout:
          path: /tmp/src/niworkflows
      - run:
          name: Load Docker image layer cache
          no_output_timeout: 30m
          command: |
            docker info
            set +o pipefail
            if [ -f /tmp/cache/docker.tar.gz ]; then
              sudo apt update && sudo apt -y install pigz
              pigz -d --stdout /tmp/cache/docker.tar.gz | docker load
              docker images
            fi
      - run:
          name: Store FreeSurfer license file
          command: |
            mkdir -p /tmp/fslicense
            printf "$FS_LICENSE_CONTENT" | base64 -d  >> /tmp/fslicense/license.txt
      - run:
          name: Set PR number
          command: |
            echo 'export CIRCLE_PR_NUMBER="${CIRCLE_PR_NUMBER:-${CIRCLE_PULL_REQUEST##*/}}"' >> $BASH_ENV
            source $BASH_ENV
            echo $CIRCLE_PR_NUMBER
      - run:
          name: Get codecov
          command: python -m pip install codecov
      - run:
          name: Run unit tests
          no_output_timeout: 2h
          command: |
            sudo setfacl -d -m group:ubuntu:rwx $PWD
            sudo setfacl -m group:ubuntu:rwx $PWD
            docker run -it --rm=false \
              -v ${PWD}:/tmp niworkflows:py3 \
              pytest --junit-xml=/tmp/pytest.xml \
                     --cov niworkflows --cov-report xml:/tmp/unittests.xml \
                     --ignore=/src/niworkflows/niworkflows/tests/ \
                     --ignore=/src/niworkflows/niworkflows/interfaces/ants.py \
                     /src/niworkflows/niworkflows

      - run:
          name: Submit unit test coverage
          command: |
            python -m codecov --file unittests.xml --root /tmp/src/niworkflows \
                --flags unittests -e CIRCLE_JOB

      - run:
          name: Run reportlet tests
          no_output_timeout: 2h
          command: |
            docker run -it --rm=false \
              -e SAVE_CIRCLE_ARTIFACTS="/tmp" \
              -v /tmp/fslicense/license.txt:/opt/freesurfer/license.txt:ro \
              -v ${PWD}:/tmp niworkflows:py3 \
              pytest -n auto --junit-xml=/tmp/reportlets.xml \
                     --cov niworkflows --cov-report xml:/tmp/reportlets.xml \
                     /src/niworkflows/niworkflows/tests/
      - run:
          name: Submit reportlet test coverage
          command: |
            python -m codecov --file reportlets.xml --root /tmp/src/niworkflows \
                --flags reportlettests -e CIRCLE_JOB

      - store_artifacts:
          path: /tmp/tests

      - store_test_results:
          path: /tmp/tests


  deploy:
    machine:
      image: circleci/classic:201711-01
    working_directory: /tmp/src/niworkflows
    steps:
      - checkout
      - run:
          name: Deploy to PyPi
          command: |
            pip install "setuptools>=27.0" twine docutils
            echo "${CIRCLE_TAG}" > niworkflows/VERSION
            echo "include niworkflows/VERSION" >> MANIFEST.in
            python setup.py check -r -s
            python setup.py sdist
            twine upload dist/*

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/

      - test_pytest:
          requires:
            - build
          filters:
            branches:
              ignore: /docs?\/.*/
            tags:
              only: /.*/
      - deploy:
          requires:
            - build
            - test_pytest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
